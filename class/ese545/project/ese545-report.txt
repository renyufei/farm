ESE 545 Project White Paper
===========================
Yufei Ren <yufren@ic.sunysb.edu>


Group Members
-------------

Yufei Ren
108006070
yufren@ic.sunysb.edu


Introduction
-------------------------

Model implementation Language
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This project will be implemented by *Verilog*.

SPU Instruction Subset
~~~~~~~~~~~~~~~~~~~~~~

The project implements 31 instructions which is a subset of Cell Processor Instruction Set. The following table specifies the execution unit and the latency of such unit.

[width="90%",cols="2,6,2,2"]
|===========================================
|Mnomonic |Instruction |Execution Unit |Unit Latency

|+lqx+ |Load Quadword(x-form) |Load Store |4

|+stqx+ |Store Quadword(x-form) |Load Store |4

|+ilh+ |Immediate Load Word |Load Store |4

|+ah+ |Add Halfword |Simple Fixed |2

|+a+ |Add Word |Simple Fixed |2

|+ai+ |Add Word Immediate |Simple Fixed |2

|+sf+ |Subtract from Word |Simple Fixed |2

|+sfi+ |Subtract from Word Immediate |Simple Fixed |2

|+mpy+ |Multiply |Simple Precision |4

|+mpyi+ |Multiply Immediate |Simple Precision |4

|+avgb+ |Average Bytes |Byte |2

|+absdb+ |Absolute Differences of Bytes |Byte |2

|+gbb+ |Gather Bits from Bytes |Permute |2

|+and+ |And |Simple Fixed |2

|+or+ |Or |Simple Fixed |2

|+xor+ |Exclusive Or |Simple Fixed |2

|+nand+ |Nand |Simple Fixed |2

|+nor+ |Nor |Simple Fixed |2

|+shl+ |Shift Left Word |Permute |2

|+rot+ |Rotate Word |Permute |2

|+br+ |Branch Relative |Branches |4

|+bra+ |Branch Absolute |Branches |4

|+brnz+ |Branch If Not Zero Word |Branches |4

|+brhnz+ |Branch If Not Zero Halfword |Branches |4

|+hbr+ |Hint for Branch (r-form) |Branches |4

|+fa+ |Floating Add |Single Precision |4

|+fs+ |Floating Subtract |Single Precision |4

|+fm+ |Floating Multiply |Single Precision |4

|+fceq+ |Floating Compare Equal |Single Precision |4

|+fcgt+ |Floating Compare Greater Than |Single Precision |4

|===========================================


Design
------

128 registers in total
32bits fixed length instructions
all GPRs are 128 bits wide.

Figure 2-5 register layout.


Data Hazard
~~~~~~~~~~~

Data Hazard

Control Hazard


Implementation
--------------

Compiler
~~~~~~~~

In this project, a compiler program is implemented for translating the
code in assembly-level code into binary code.

% sample
% a	rt,ra,tb
% a	r10,r1,r2
% into	a(0001 1000 000) r2(0000010) r1(0000001) r10(0001010)

psuedo code
loop:
	readline
	parse line
	write the translated binary code (32bits - 4Bytes) into the binary file




% mnomonic	


% using 'hexdump' to check the content of the binary file



Architecture Design
-------------------

There are six basic instruction formats. These instructions are all 32
bits long.

The SPU architecture defines a set of 128 general-purpose registers (GPRs), each of which contains 128 data bits.

The SPU loads and stores transfer quadwords between GPRs and local storage.

Byte ordering defines how the bytes that make up halfwords, words,
doublewords, and quadwords are ordered in memory. The SPU supports
most-significant byte (MSB) ordering. With MSB ordering, also called
big endian, the most-significant byte is located in the lowest
addressed byte position in a storage unit (byte 0). Instructions are
described in this document as they appear in memory, with successively
higher addressed bytes appearing toward the right.



Development Toolkit
-------------------

icarus verilog - iverilog



iverilog -o obj src1 src2

vvp obj

using GTKWave to dignose problems


$display

$finish

$readmemh
$readmemb




